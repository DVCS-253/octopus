var search_data = {"index":{"searchIndex":["testuserinterface","userinterface","displayresult()","executecommand()","main()","parsecommand()","test_add()","test_branch()","test_checkout()","test_clone()","test_commit()","test_diff()","test_help()","test_init()","test_merge()","test_pull()","test_push()","test_status()","help"],"longSearchIndex":["testuserinterface","userinterface","userinterface#displayresult()","userinterface#executecommand()","userinterface#main()","userinterface#parsecommand()","testuserinterface#test_add()","testuserinterface#test_branch()","testuserinterface#test_checkout()","testuserinterface#test_clone()","testuserinterface#test_commit()","testuserinterface#test_diff()","testuserinterface#test_help()","testuserinterface#test_init()","testuserinterface#test_merge()","testuserinterface#test_pull()","testuserinterface#test_push()","testuserinterface#test_status()",""],"info":[["TestUserInterface","","TestUserInterface.html","","<p>Contains the test cases for the supported commands\n"],["UserInterface","","UserInterface.html","","<p>Provides interface to the users in order to execute commands\n"],["displayResult","UserInterface","UserInterface.html#method-i-displayResult","(result)","<p>Displays the result of execution of the command<br> Params:\n\n<pre>- result(String): result of the execution</pre>\n<p>Returns: …\n"],["executeCommand","UserInterface","UserInterface.html#method-i-executeCommand","(cmd, params)","<p>Acts a method from other module. It will be replaced by actual method from\nother module<br> Params:\n\n<pre>- cmd(String): ...</pre>\n"],["main","UserInterface","UserInterface.html#method-i-main","(testCommands)","<p>Entry point of the application. Takes the &#39;command&#39; from user in\nform of program arguments  and …\n"],["parseCommand","UserInterface","UserInterface.html#method-i-parseCommand","(cmd, fullCmd)","<p>Does the command pattern matching and pass it to &#39;parseCommand&#39;\nmethod after basic syntax checking …\n"],["test_add","TestUserInterface","TestUserInterface.html#method-i-test_add","()","<p>Test for &#39;add&#39; command and its parameters\n"],["test_branch","TestUserInterface","TestUserInterface.html#method-i-test_branch","()","<p>Test for &#39;branch&#39; command and its parameters\n"],["test_checkout","TestUserInterface","TestUserInterface.html#method-i-test_checkout","()","<p>Test for &#39;checkout&#39; command and its parameters\n"],["test_clone","TestUserInterface","TestUserInterface.html#method-i-test_clone","()","<p>Test for &#39;clone&#39; command and its parameters\n"],["test_commit","TestUserInterface","TestUserInterface.html#method-i-test_commit","()","<p>Test for &#39;commit&#39; command and its parameters\n"],["test_diff","TestUserInterface","TestUserInterface.html#method-i-test_diff","()","<p>Test for &#39;diff&#39; command and its parameters\n"],["test_help","TestUserInterface","TestUserInterface.html#method-i-test_help","()","<p>Test for &#39;help&#39; command and its parameters\n"],["test_init","TestUserInterface","TestUserInterface.html#method-i-test_init","()","<p>Test for &#39;init&#39; command and its parameters\n"],["test_merge","TestUserInterface","TestUserInterface.html#method-i-test_merge","()","<p>Test for &#39;merge&#39; command and its parameters\n"],["test_pull","TestUserInterface","TestUserInterface.html#method-i-test_pull","()","<p>Test for &#39;pull&#39; command and its parameters\n"],["test_push","TestUserInterface","TestUserInterface.html#method-i-test_push","()","<p>Test for &#39;push&#39; command and its parameters\n"],["test_status","TestUserInterface","TestUserInterface.html#method-i-test_status","()","<p>Test for &#39;status&#39; command and its parameters\n"],["help","","help_txt.html","","<p>1 init  :   Create an empty Git repository or reinitialize an existing one\n\n<pre>usage :   init [&quot;directory&quot;]</pre>\n"]]}}